第3章 Webセキュリティの基礎

なぜHTTPを学ぶのか
Webアプリケーションの脆弱性はWeb固有の特性に由来するものがある。
それを理解するためにHTTPやセッション管理の理解が不可欠。

基本的なこと
ブラウザからHTTPリクエストをWebサーバに要求し、その要求に合ったHTTPレスポンスをブラウザに返す。
OWASP Zapに表示されているのがリクエストメッセージ。
1行目はリクエストライン＝Webサーバに対する命令
リクエストラインの例
GET http://example.jp/31/31-001.php HTTP/1.1
リクエストメッセージの2行目以下はヘッダで名前と値をコロンで区切っている。
ヘッダにとって必須なのはHostのみ。

レスポンスメッセージ＝Webサーバから返された内容
レスポンスメッセージはステータスライン、ヘッダ、空行、ボディで返ってくる。

ステータスラインはリクエストメッセージの処理結果ステータスを返す。
ヘッダの中で有名なのは以下
・Content-Length：ボディのバイト数
・Content-Type：MIMEタイプというリソースの種類を指定する

■入力、確認、登録
リクエストラインがPOSTの場合、空白行に続いてブラウザから入力された値が入っている。
この部分をメッセージボディと呼ぶ。
POSTにより送信される値のヘッダがContent-TypeとContent-Length
Content-Typeは送信する側のMIMEタイプでformで指定。
指定がない場合はapplication/x-www-form-urlencodedとなる。
このタイプは値の組を＆で繋いだデータ形式となる。

パーセントエンコーディング＝URL上で特別な意味を持つ日本語や記号をURL上に記述するためのもの。
例えばスペースは%20になる。ただしapplication/x-www-form-urlencodedの場合は+になる。

Refer＝リンク元のURLを示すヘッダ
Referヘッダはツールによって改変されることもあるので正しくリンク元を示しているわけではない。
これの問題はURLにセッション情報を含んでいる場合。

GETとPOSTの使い分け
・GETは参照のみに用いる
・GETは副作用がないことが期待される
・秘密情報の送信にはPOSTを利用すること
副作用とは？
リソースの取得以外の作用。データの追加、更新、削除などの処理が該当。
GETには以下の可能性があるのでPOSTを使った方がよい
・URL上に指定されたパラメータがRefer経由で残る
・URL上に指定されたパラメータがログに残る
・URL上のパラメータがブラウザのアドレスバーに表示される
・パラメータ付きのURLを共有してしまう
なので以下の場合はPOSTにした方が良い
・データ更新など副作用を伴うリクエスト
・秘密情報を送信する場合
・送信するデータの総量が多い場合

hiddenパラメータは書き換え可能→ツール使えば
OWASP ZAPでブレーク処理を入れれば入力値を確認することが出来る。
HTTP上では全てのパラメータは同じものと扱われ書き換え可能である。
利用者自身で書き換えられてはまずいものはセッション変数、それ以外はhidden派和メータに保存すればよい。
ログイン前はhiddenパラメータを使えば問題ない。

HTTPには以下の認証機能がサポートされている。
・Basic認証
・NTLM認証
・Digest認証
Basic認証はリクエストメッセージ部分にIDとパスワードが載っている。
OWASP ZAPで復元可能。

認証＝利用者が誰かに本人であることを何らかの手段で確認すること。
認可＝認証を受けたユーザに権限を与えること

■クッキーとセッション管理
HTTP認証を使わない場合にはサーバ側で認証情報を覚えておく必要がある＝セッション管理
セッション管理をHTTPで実現するためクッキーという仕組みが出来た。
クッキーはサーバ側からブラウザに対して名前＝変数の組を覚えておくよう指示するもの
クッキーを覚えたブラウザは同じサイトにリクエストを行う際、
覚えたクッキーを送信する。
有効期限がない場合でもブラウザを閉じればクッキーは消える。
アプリケーションデータを保持する目的でクッキーを利用しない方が良い。
理由は以下
・保持できる個数や文字列に制限がある
・ユーザ自身で変更できる
セッションIDの要件は以下
・推測できないこと
  →乱数の質
・強制されないこと
  →他のユーザから強制的に変更されないこと
・漏洩しないこと

クッキーの属性としてセキュリティ上関係するものは以下
・Domain
  デフォルトではクッキーをセットしたサーバにのみ送信される。
  複数のサーバに送信したいときに利用
・Secude
  HTTPSのときのみサーバに送信される
・HttpOnly
  Javascriptからアクセスできないクッキーを設定

Webアプリケーションには以下の攻撃が存在する
・能動的攻撃
  サーバに対して直接攻撃すること（SQLインジェクションとか）
・受動的攻撃
  Webサイト利用者に罠を仕掛け、その罠を閲覧したユーザを通してアプリケーションを攻撃する
  ・単純な受動的攻撃
    怪しいサイトにアクセスしてきたユーザに仕掛けのあるHTMLで攻撃
    Adobeが多い
  ・正規サイトを悪用する受動的攻撃
    正規サイトを攻撃してコンテンツに仕掛けを行う
    仕掛けを含むコンテンツを開かせて攻撃
  ・サイトをまたがった受動的攻撃
    罠サイトと正規サイトをまたがった攻撃
    手順は以下
      利用者が罠サイトを閲覧する
      罠サイトから仕掛けを含むHTMLをダウンロードする
      HTMLの仕掛けが作動して正規サイトに攻撃リクエストを送信
      正規サイトからJSなどの仕掛けを含むレスポンスが返る

防ぎ方
  サンドボックス
    利用者に配布元を確認させた上で利用者が許可した場合のみ実行
    出来ることを制限するサンドボックスという環境を用意
  同一オリジンポリシー
    JSなどのクライアントスクリプトからさイトをまたがったアクセスを禁止するセキュリティ上の制限
    JSのiframeで別サイトにまたがって情報を表示することが出来る。
    同一オリジンポリシーを利用することで別ドメインからのこういったアクセスをとめることができる。
クロスドメインアクセスが許可されているものは以下
・frame要素とiframe要素
・img要素
・script要素
・CSS
・form要素のaction属性

CORSとは？
従来の同一オリジンポリシーに依存するアプリケーションとの互換性を保ちながら異なるオリジンとのデータ交換を可能にするもの。

シンプルなリクエストとは？
以下のリクエストを満たすもの
メソッドは下記のうちのいずれか
・GET
・POST
・HEAD

XMLHttpRequestオブジェクトのsetRequestHeaderメソッドで設定するリクエストヘッダは以下
・Accept
・Accept-Language
・Content-Language
・Content-Type

Content-Typeのヘッダは以下
・application/x-www-form-urlencoded
・multipart/form-date
・text/plain

シンプルなリクエストの条件を満たさない場合、ブラウザはプリフライトリクエストを送信する。
XMLHttpRequestの前にリクエストを送るものをプリフライトリクエスト。

HTTP認証やクッキーなどの認証に用いられるリクエストヘッダは自動的に送信されない。
それを送信するためにXMLHttpRequestのプロパティwithCredentialsをtrueにする必要がある。