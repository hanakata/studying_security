GETとPOSTを正しく使い分けているか※以下の場合はPOST
・データ更新など副作用を伴うリクエスト
・秘密情報を送信する場合
・送信するデータの総量が多い場合

インジェクション系
・入力エンコーディングの妥当性検証は行ったか
→エンコーディング指定が必要
・文字エンコーディングの変換は行ったか
→変換が必要だった場合
・入力値検証は行ったか
→事前に正しい入力値を把握すること
・NULL値のチェックは行っているか
→あくまで保険的位置づけ
・制御文字のチェックはしているか
ASCIIコード0x20及び0x7F
全ての入力値について制御文字チェックを行う
・文字数のチェックはしているか
・数値の最小値、最大値のチェックはいているか
・入力項目が指定されていないケースに対応できているか
・配列形式で入力されているケースに対応できているか
・HTMLのエスケープ(＜と"と&)を実施しているか
エスケープとして
・要素内容についてエスケープされているか
・属性値はダブルクォートで囲まれているか
  $quote_styleはENT_COMPATかENT_QUOTESを指定されているか
文字エンコーディングをブラウザとWebアプリケーションで揃えられているか
リンクはhttp、httpsで始まる、もしくは/で始まるものであるか
・JavaScriptの文字列リテラルのエスケープが入っているか特に<>'"\
・JavaScriptの動的生成を行っていないか
・エラーメッセージに不必要な情報（エラーを出している関数名など）が記載されていないか
・SQLを実行する箇所にてシングルクォートをエスケープする処理が入っているか
・SQL文を構成する場合、プレースホルダーを利用しているか
・PDOを利用しているか
・PDOのオプションで例外処理を使用しているか
・PDOの複文実行禁止を有効にしているか
・PDOの静的プレースホルダを有効にしているか
・ソート処理を行う際、妥当性確認を行っているか
・CSRF対策を行う必要のあるページを把握しているか
・CSRF対策を行うため、ユーザからのリクエストかを判別できる処理を組み込んでいるか
  例えば以下
  ・秘密情報の埋め込み
  ・パスワード再入力
  ・Referのチェック
・重要な処理を実行した後に確認メールが送られているか
・X-Frame-Optionsをframeの利用状況によって正しく設定しているか
・セッション管理についてWebアプリケーション開発ツールの提供するセッション管理機構を利用しているか
・セッションIDはクッキーに保存されるようになっているか
・認証後にセッションIDを変更しているか
・セッションIDが変更できない場合、トークンを利用しているか
・オープンリダイレクトをする必要がないところで実施していないか
・オープンリダイレクトを行う必要がある場合、番号指定で行っているか
・オープンリダイレクトを行う必要がある場合、ドメインチェックを行っているか
・外部からのパラメータをHTTPレスポンスヘッダとして出力していないか
・リダイレクトを専用APIにまかせているか
・クッキー生成を専用APIにまかせているか
・ヘッダ生成するパラメータの改行文字をチェックし改行文字があった場合はエラーとしているか
・セッションIDにクッキーを利用する場合、セキュア属性をつけているか
・セッションIDをクッキーに保存できない場合、トークンを利用しているか
・トークンを利用した場合、トークンを保管するクッキーにセキュア属性をつけているか
・クッキーのDomain属性がデフォルトになっているか
・クッキーのExpires属性をつけていないか
・セッションIDを利用している状態でクッキーのHttpOnly属性がOnになっているか
・メール送信を行う際、専用のライブラリを使っているか
・外部からのパラメータをメールヘッダに含ませないようにしているか
・外部からのパラメータを含む必要がある場合、メール送信時に改行チェックを行っているか
・入力されたメールアドレスのチェックを行っているか
・入力された件名の文字エンコードチェックを行っているか
・外部からファイル名を指定できる仕様になっていないか
・ファイル名にディレクトリ名が含まれているかチェックしているか
・ファイル名を英数字に限定しているか
・ファイルの安全な格納場所を決めているか
・レンタルサーバの場合、非公開ディレクトリが利用できるか
・公開ディレクトリに公開予定をしていないファイルが入っていないか
・必要のないOSコマンド呼び出しを利用していないか
・シェル呼び出し機能のある関数を利用していないか
・外部から入力された文字列をコマンドラインのパラメータに渡していないか
・OSコマンドにパラメータを渡す場合、安全な関数でエスケープしているか
・ファイルアップロード機能にてアップロードされたファイルを公開ディレクトリに置いていないか
・ファイルアップロード機能にてサーバスクリプトの拡張子ファイルをアップロードできないようにしているか
・ファイルダウロード機能についてContent-Typeが正しく設定されているか
・ファイルダウロード機能についてレスポンスヘッダX-Content-Type-Option:nosniffを指定されているか
・ファイルダウロード機能についてContent-Dispositionヘッダが設定されているか
・PDFファイルは必ずダウンロードさせるような仕様になっているか
・PDFをobject要素やembed要素では開けないような仕組みになっているか
・includeを行っている場合、外部から指定できるようになっていないか
・includeを行っている場合、インクルードをすべきファイル名かの妥当性をチェックしているか
・evalを利用していないか（同じような機能をもった関数も含む）
・evalの引数に外部からパラメータを与えられないようにしているか
・evalに外部からパラメータを与えている場合、英数字のみ入力されているかチェックしているか
・データの受け渡しの際にシリアライズせずJSON形式で渡しているか
・クッキーやhiddenパラメータではなくセッション変数など書き換えできない形でシリアライズ形式のデータを受け渡しているか
・HMACなどの改ざん検知の仕組みを導入してデータが改ざんされていないことを確認しているか
・XMLを利用せずJSONを利用しているか
・XMLを利用する場合、libxml2のバージョン2.9以降を利用しているか
・XMLを利用する場合、libxml_disable_rntry_loader(true)を呼び出しているか
・不必要な共有資源（共有変数や共有メモリ、ファイル、DBなど）を利用していないか
・共有資源を利用している場合、排他制御がされているか
・キャッシュを利用する際、アプリケーション側で適切なレスポンスヘッダを設定しているか
・キャッシュサーバ側でキャッシュ制御の適切な設定を行っているか
・JSONを生成する際、信頼できるライブラリを用いているか
・JSONをパースする際、安全なAPIでJSONを解釈しているか
・MIMEタイプを正しく設定しているか
・レスポンスヘッダX－Content-Type-Options:nosniffを出力しているか
・小なり記号などをエスケープしているか
・XMLHttpRequestなどCORS対応の機能だけから呼び出せるようにしているか
・コールバック関数名の文字種と文字数を制限しているか
・WEBAPIを利用している場合CSRFトークンを実装しているか
・WEBAPIを利用している場合二重送信クッキーを利用しているか
・WEBAPIを利用している場合カスタムリクエストヘッダによる対策を行っているか
・WEBAPIを利用している場合入力データのMIMEタイプを検証しているか
・WEBAPIを利用している場合CORSを適切に実装しているか
・JSONを生成しているAPIでX-Content-Type-Options:nosniffヘッダの付与をしているか
・JSONを生成しているAPIでリクエストヘッダX-Requested-With:XMLHttpRequestの確認
・JSONPを利用している場合、JSONPに秘密情報を入れていないか
・JSONPを利用する必要のない場合でJSONPを利用していないか
・CORSの設定でオリジンとして＊を設定していないか
・CORSの設定でオリジンのチェックを緩和していないか
・HTTPレスポンスヘッダで以下のパラメータを送信しているか
X-Frame-Options
X-Content-Type-Options
X-XSS-Protection
Content-Security-Policy
Strict-Transport-Security
・適切なDOM操作あるいは記号のエスケープをしているか
・eval、setTimeout、Functionコンストラクタなどの引数に文字列形式で外部からの値を渡していないか
・URLのスキームをhttpかhttpsに限定しているか
・最新のライブラリを利用しているか
・XMLHttpRequestのURLを検証しているか
・jQueryのセレクタは動的生成していないか
・Webストレージに重要な情報を保存していないか
・postMessageを利用する際メッセージ送信先の確認
・postMessageを利用する際メッセージ送信元の確認
・オープンリダイレクトを利用する場合リダイレクト先のURLを固定にする
・オープンリダイレクトを利用する場合リダイレクト先のURLを直接指定せず番号などで指定する
・パスワード保存するときソルトを足してハッシュ値を作成しているか
・パスワード変更を行う機能がある場合、現在のパスワードを確認しているか
・ログを出力しているか
・アプリケーション全体で利用する文字コードを統一しているか
・サービスに不必要なソフトウェアを稼動させていないか


■捕捉
クッキーの取得スクリプト
<script>aleart(document.cookie)</script>
