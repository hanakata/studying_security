第4章 Webアプリケーションの機能別に見るセキュリティバグ

脆弱性はどこで発生するか？
HTMLの出力＝クロスサイトスクリプティング
HTTPヘッダの出力＝HTTPヘッダインジェクション
SQL文の呼び出し＝SQLインジェクション
シェルコマンドの呼び出し＝OSコマンドインジェクション
メールヘッダおよび本文の出力＝メールヘッダインジェクション

インジェクション系脆弱性とは？
元々用意されているコマンド＋変数の変数にコマンドにとって
終端である意味を持つ文字を代入し別のコマンドを実行させるもの。
インジェクション系は出力系で起きる。

■入力処理とセキュリティ
入力値のチェックだけで脆弱性対策にはならないが実害を防ぐ、低減させることは出来る。
入力＝GETとかPOST、クッキーなど
入力処理で行うこと
・入力エンコーディングの妥当性検証
  →行う理由：文字コードを使った攻撃手法があるから。
   検証方法：PHPであればmb_check_encodingを利用する
・文字エンコーディングの変換
  →行う理由：HTTPメッセージとプログラム内部で文字エンコーディングが異なるから
   変換方法：自動的に変換する場合とスクリプトで明示する方法がある。
・入力値の妥当性検証
  →行う理由：アプリケーションの仕様。ついでにセキュリティの保険的な対策になる場合もある
   検証方法：そもそも検証する理由として想定外の値が入っている場合にアプリケーションが異常な動作をしないため
            
文字エンコーディングはチェックして問題なければ変換するという手法もとれる。
バイナリセーフ＝入力値がどんなバイト値でも正しく扱えること。狭い意味だと0バイトの文字でも正しく動作すること
ヌルバイトを文字列の終端としてしまい、それ以降を切り詰めてしまう言語＝バイナリセーフでない言語
ヌルバイト攻撃＝単独で被害を与えるものではなくほかの脆弱性対策回避に利用する。
例えば以下チェックの場合、
if(eref('^[0-9]+$',$p) === FALSE)
この場合、整数なら通る。また整数＋文字列ならはじく。
ただし1%00<script>alert('XSS')</script>
これは通してしまう。
これはereg関数はバイナリセーフではない関数なので空白値（%00）があった時点で文字列が終わっていると判断する。
そのためチェック自体は最初の1で通ってしまい実際のコードでは文字列を読み込んでしまう。
チェックするためにはNULLであるかを確認することが重要。
ただし入力チェックはあくまで保険的なもので捉えるべき。入力値検証の基準はアプリケーション要件。
全ての文字を許容するという要件でも制御文字のチェックはできる。
例えばASCIIコード0x20及び0x7Fは通常利用されない。

また文字数は全てのパラメータについて必須。

その他の注意点は以下
・入力項目が指定されていないケース
入っているかいないかのチェックでない場合はnullを入れる。
・配列形式で入力されているケース
filter_inputを利用する
入力値の検証の対象は全てのパラメータ
入力値の検証は正規表現が便利
全体一致は^$ではなく\A\Zを利用する。^$の場合最後が改行文字ならすり抜ける。

住所入力など文字と数字が混在する場合でも制御文字チェックは行うべき
以下ソース
if(preg_match('/\A[[:^cntrl:]]{1,30}\z/u',$addr) !== 1)

■表示処理に伴う問題
表示処理が原因で発生するセキュリティ上の問題は以下
・クロスサイトスクリプティング
・エラーメッセージからの情報漏えい

■クロスサイトスクリプティング
・発生箇所
  Webアプリケーション上でHTML、JavaScriptを生成している箇所
・影響を受けるページ
  Webアプリケーション全体
・影響の種類
  Webサイト利用者のブラウザ上でのJS実行、偽情報の表示
・影響度の度合い
  中～大
・利用者関与の度合い
  必要→罠サイトの閲覧、メール記載のURL、攻撃を受けたサイトの閲覧など
・対策の概要
  属性値はダブルクォートで囲む。エスケープする

攻撃手法と影響
・クッキー値の盗み出し
$_GETで取得しているものに対し以下のスクリプトを読み込ませる
<script>aleart(document.cookie)</script>
エスケープしていなければそのまま実行できる。
これを利用してiframeを使って脆弱性サイトを表示。
そのサイトの正規利用者が罠サイトを閲覧すると利用者のセッションIDが取れる。
・その他のJavaScriptによる攻撃
その他XSSを利用したワームを使うことで攻撃も可能。
・画面の書き換え
まず罠サイトにてボタンをリンクに見せかけたページを作成。
送る値は新しいフォームページ。
これをクリックするとPOSTでnameが送られてくるのでそこをechoで表示してしまう。
そのためページが上書きされ別のページへ遷移させられる。

・反射型XSSと持続型XSS
攻撃用JavaScriptが攻撃対象とは別のサイトにある＝反射型XSS
→入力値をそのまま表示させるパターンのサイトで発生
攻撃用JavaScriptが攻撃対象のデータベースに保存される＝持続型XSS
→WebメールやSNS

・脆弱性が生まれる原因
HTML生成時にHTMLの文法上特別な意味を持つ特殊記号を正しく扱っていないこと。
→エスケープ処理を行う。
例えば
・引用符がない場合
引用符がないと空白が属性値の終わりとなる。そのため以下のような場合XSSが通る
1+onmouseover%3daleart(document.cookie)
+はスペース%3dは＝を示す。
・引用符("")がある場合
この場合でも"があれば属性の終了扱いになるので結果同じになる
"+onmouseover%3d"aleart(document.cookie)

・対策
<や"をエスケープすること
要素内容は<と&をエスケープする。
属性値についてはダブルクォートで囲って＜と"と&をエスケープする
PHPであればhtmlspecialchars関数を利用する。
実際のプログラミングは
・要素内容について$quote_styleはなんでも良い
・属性値はダブルクォートで囲み$quote_styleはENT_COMPATかENT_QUOTESを指定する
アプリケーション側の文字エンコーディングとブラウザのエンコーディングがずれるとXSSに影響するので
header関数を利用して文字エンコーディングを指定する。

・XSSに対する保険的対策
HTML上の文脈によって複数の対処が必要になるので漏れる事が多い。
なので被害を低減する方法が以下
・X-XSS-Protectionレスポンスヘッダの利用
  →Webサーバの設定で入れておくと楽
・入力値検証
・クッキーにHTTPOnly属性を付与する

aタグのhref、imgのframeなどはURLが属性値。
URLが変更できるならjavascipt:JavaScript式という形式でJavaScriptを起動できる。
例えばjavascript:alert(document.cookie)なんかは実行可能
なのでURLを生成する場合、/で始まるものか、http、httpsで始まるもののみに限定させると良い。
またリンク先ドメインチェックを行いURLが外部ドメインの場合、エラーにするか利用者に知らせる仕組みを作る必要がある。

・JavaScriptの動的生成
htmlspecialchars関数を利用してもinit関数を利用している場合以下のようなクエリは実行出来てしまう
name=');alert(document.cookie)
これがinit関数の引数となる文字リテラルが強制的に終了させられ第2の文が挿入されてしまうから。
原因はJavaScriptの文字列リテラルのエスケープが抜けていたこと
<>'"\あたりはエスケープが必要。
script要素内はタグや文字参照を解釈しないのでHTMLとしてのエスケープは必要なく
JavaScriptの文字列リテラルとしてのエスケープを行う。
ただこれだけでは意味がなく例えば以下の攻撃は通る
</script><script>alert(document.cookie)//

基本的にJavaScriptの動的生成を避けた方が良い。

■エラーメッセージからの情報漏えい
情報漏えいについては以下の2種類
・エラーメッセージに攻撃者にとって有益なアプリケーションの内部情報が含まれる
・意図的な攻撃としてエラーメッセージに秘密情報を表示させられる
基本的にエラーを起こしている関数名やデータベース情報などは表示しない。

■SQL呼び出しに伴う脆弱性
・SQLインジェクション
攻撃が成立すると以下のような影響を受ける可能性がある
 データベース内の全ての情報が外部から盗まれる
 データベースの内容が書き換えられる
 認証を回避される
 DBサーバ上のファイル読出し、書き込み、プログラムの実行など
 ・発生箇所
  SQL呼び出しを行っている箇所
・影響を受けるページ
  全てのページ
・影響の種類
  情報漏えい、データ改ざん、認証の回避、プログラムの実行、ファイル参照・更新
・影響度の度合い
  大
・利用者関与の度合い
  不要
・対策の概要
  静的プレースホルダーを利用してSQLを呼び出す
例えばエラーメッセージ表示経由での情報漏えいやUNIONを利用しての情報漏えいなども可能
また以下の攻撃も可能
・OSコマンドの実行
・ファイルの読出し
・ファイルの書き込み
・HTTPリクエストにより他のサーバへの攻撃
ファイルの読出しについてはLOAD DATA INFILEを利用する

・脆弱性が生まれる原因
  文字列リテラルの問題
  シングルクォートがある場合にはそれを文字列とみなす場合シングルクォートを重ねる必要がある。
  それが抜けているので発生する。

数値リテラルでもSQLインジェクションは発生する
例えば以下のようなselect文の場合
select * from employees where age < $age
この$ageに1;delete from employeesが入ると
select * from employees where age < 1;delete from employees
になる。
数値リテラルはシングルクォートで囲まないため数値でない文字が現れた時点で数値リテラルが終了する
なのでこの例だと;以降が数値リテラルからはみ出しSQL文として解釈される。

・対策
根本原因はパラメータとして指定した文字列の一部がリテラルをはみ出すことによりSQL文が変更されること。
なのでSQL文の変更を防ぐことが重要。方法は
1.プレースホルダによりSQL文を組み立てる
2.アプリケーション側でSQL文を組み立てる際にリテラルを正しく構成するなどSQL文が変更されないようにする
プレースホルダー＝？とかで場所取りをしているもの
PDOを正しく利用することで防ぐことが出来る。
例えばPDOのオプションを利用し例外処理を追加したり複文＝SQL文をセミコロンで繋いで複数実行すること、を
禁止したりすることが可能。

静的プレースホルダー
→値のバインドをデータベースエンジン側で行う。
 プレースホルダのついたSQL文はそのままデータベースエンジンに送られコンパイルなど実行準備が行われSQL文が確定する。
 次にバインド地がデータベースエンジンに送られエンジン側で値をはめた後、SQL文が実行される
動的プレースホルダー
→SQLを呼び出すアプリケーション側のライブラリ内でパラメータをバインドしてからデータベースエンジンに送る。
 バインドに当たりリテラルは適切に構成されるので処理にバグがなければSQLインジェクションは起こらない。
どちらのプレースホルダーでもSQLインジェクションは解消されるが原理的に静的プレースホルダはSQLインジェクションが
起こらなくなるので可能なら静的プレースホルダーを利用すること

ソート(ORDER BY)によってもSQLインジェクションは発生する。
例えば
SELECT * from books order by $row
のようなSQL文だった場合、
EXTRACTVALUE(0,(select concat('$',id,':',pwd) FROM users LIMIT 0,1)
のような文が指定された場合以下のようなSQL文となる
SELECT * from books order by EXTRACTVALUE(0,(select concat('$',id,':',pwd) FROM users LIMIT 0,1)
結果、パスワードが表示される。
また別のコマンドも実行可能になる。
それを防ぐためソート列名の妥当性確認を行うようにする。
例えばソートする列名を配列に入れ、その中にあるものしかソートさせないなどの処理を実装する。
SQLインジェクションの保険的対策は以下
・詳細なエラーメッセージの抑止
・入力値の妥当性検証
・データベースの権限設定

■重要な処理の際に混入する脆弱性
脆弱性の種類は以下
・クロスサイト・リクエストフォージェリー
・クリックジャキング

■クロスサイト・リクエストフォージェリー（CSRF）
WebアプリケーションにCSRF脆弱性がある場合の影響は以下
・利用者アカウントによる物品の購入
・利用者退会処理
・利用者アカウントによるSNSや問い合わせフォームなどへの書き込み
・利用者パスワードやメールアドレスの変更
対策としては重要な処理を実行する前に利用者の意図したリクエストであることを確認すること。
 ・発生箇所
  クッキーのみでセッション管理が行われているサイト
  HTTP認証、TLSクライアント証明書のみで利用者の識別が行われているサイト
・影響を受けるページ
  CSRF脆弱性のあるページのみ
・影響の種類
  物品購入、パスワード変更など重要な処理
・影響度の度合い
  中～大
・利用者関与の度合い
  必要→リンクのクリック、攻撃者の罠サイト閲覧など
・対策の概要
  重要な処理の前に正規利用者からのリクエストであることを確認する
  例えばパスワード変更画面の場合、変更するためには以下の動作が必要になるケースが多い
  ・POSTメソッドで該当phpがリクエストされること
  ・ログインしていること
  ・POSTパラメータとしてパスワードが指定されていること
  これらの条件を満たしたリクエストを送信させる攻撃がCSRF攻撃。
  CSRFの流れとして
  ・ユーザがサイトにログインしている
  ・攻撃者が罠を用意する
  ・用意された罠をユーザが閲覧する
  ・JavaScriptの動作(onload="document.form[0].submit()")によりPOSTされる
    ※クッキーは正常のものを利用しているので正常扱いになる。
  ・パスワードが変更される
実際の攻撃では攻撃の様子を隠すためにiframeを利用して仕掛ける。
ただしiframeは外側から内側の情報を表示することは出来ないので
情報を盗み出すことは出来ない。ただパスワードを変更するとその情報は攻撃者に伝わることとなる。

CSRFとXSSの違い
CSRFはリクエストに対するサーバ側の処理を悪用するもの。なので出来るのはサーバ側に用意されているものだけ
XSSはスクリプトを埋め込むのでユーザ側の処理も悪用可能。
XSSの方が厄介ではあるものの認知度が低いこともあり対策が進んでいない

確認画面がある場合のCSRF攻撃
確認画面があるとCSRF攻撃は無効になる＝間違い
確認画面から実行画面へのデータの受け渡しはPOSTかセッション変数
POSTの場合は確認画面がないのと同意なので意味はなし
セッション変数の場合、以下の操作が必要となる
・確認画面に対してメールアドレスをPOSTしセッション変数にメールアドレスをセットする
・タイミングを見計らって実行画面を呼び出す。
そのためにiframe要素を2つ用意する。
ひとつは罠サイトと同時に呼び出され確認画面にメールアドレスをPOSTする。
その結果セッション変数にメールアドレスがセットされた状態になる。
またもうひとつのiframeで罠サイトが表示されてから10秒後にCSRF攻撃をかけ実行画面を表示する。
実行画面が表示された時点でセッション変数には値が入っているので攻撃成立。
ウィザード形式のように何画面あったとしてもiframeを増やせばいくらでも対応可能。

ファイルアップロードフォームでのCSRF攻撃
ファイルアップロードフォームでも攻撃が可能。
例えばphpinfo()を埋め込んだファイルをアップロードする。
そうするとチェックが入っていないのでそのままアップロードできる。それを確認することで情報が取得できる。

脆弱性が生まれる原因
・form要素のaction属性にはどのドメインのURLでも指定できる
・クッキーに保管されたセッションIDは対象サイトに自動的に送信される
これらはWebの性質。
またクッキーだけでなく自動的に送信されるパラメータを使ってセッション管理しているサイトでもCSRF脆弱性は存在する。

対策
・CSRF対策の必要なページを区別する
  対策する必要のあるページは圧倒的に少ない。
  他のサイトからアクセスされる可能性のあるページは必要ない。
  自分のサイトからのみアクセスして欲しいもの（例えばパスワード変更や個人情報編集など）に対策が必要。
  これは開発プロセスに組み込んだ方が良い例えば
  ・要件定義で機能一覧を作成しCSRF対策の必要な機能にマークする
  ・基本設計肯定で画面遷移図を作成しCSRF対策の必要なページにマークする
  ・開発肯定でCSRF対策を作りこむ
・正規利用者の意図したリクエストを確認できるよう実装する
  CSRF対策として必要なことは正規利用者の意図したリクエストであることの確認。
  確認する方法は以下
  ・秘密情報の埋め込み
    リクエストを送るときにトークンを仕込む。フレームワークの場合は実装されていることが多い。
    使わない場合は暗号論的擬似乱数生成器を利用すること。
    使うときに重要なのは空の場合の処理を入れておくこと。
  ・パスワード再入力
    以下の要件を満たしているときに有効
    ・物品購入するときに正規利用者であることを再度確認する
    ・共有PCで別人が操作している状況などがなく本当に正規利用者か確認する
    パスワードを仕込むのは最終画面。それ以外はCSRFの対象になりかねない。
  ・Referのチェック
    正規のリクエストとCSRFを利用してのリクエストはReferがそもそも違う。
    なので入力画面や確認画面など1つ手前のページから実行されていることを確認するようにすること。
    ただしReferを抑止している場合などあるのでその場合あまり意味がない。
保険的対策
例えば登録済みのメールアドレスがあればそちらに通知メールを送信する
攻撃を受けることは防げないが攻撃を受けたことを検知できる。

■クリックジャッキング
クリックジャッキング
→iframe要素とCSSを利用することでクリックを実行させる攻撃手法
・発生箇所
  マウスなどポインティングデバイスのみの操作で「重要な処理」を実行でき、かつ認証を要するページ
・影響を受けるページ
  クリックジャッキング脆弱性があるページのみ
・影響の種類
  被害者の権限で重要な処理が実行させられる。
・影響度の度合い
  中～大
・利用者関与の度合い
  必要→攻撃者の罠サイト閲覧した上でクリック
・対策の概要
  重要な処理の実行ボタンなどがあるページでX-Frame-Optionsヘッダを出力する

攻撃手法と影響
例えばTwitterにある投稿フォームを埋めておくこと（ウェブインデント）を利用して
犯罪予告は可能。
先にウェブインデントで投稿させたい文字列を用意しておく。
そこに罠画像を用意して罠画像を奥、攻撃対象フォームを手前にする。
攻撃対象フォームを透明に設定することで準備完了。

脆弱性が生まれる原因
HTMLの仕様なのでバグうんぬんではない。

対策
ブラウザの支援が必要。
ブラウザ側でiframeでの参照を制限するX-Frame-Optionsというものが出てきたので
これを利用することで防げる。
iframeを使わないサイトではDENYを指定しframeなどを使っているがホストが単一の場合は
SAMEORIGINを利用することで防げる。

■セッションハイジャックの原因と影響
セッションハイジャック＝第三者がセッションIDを悪用して成りすますこと
セッションIDを知る手段は以下3つ。
・セッションIDの推測
→セッションIDの生成方法が不適切な場合、利用者のセッションIDを第三者が推測できセッションハイジャックが可能になる可能性がある。
・セッションIDの盗み出し
→セッションIDを盗み出す方法は以下
  ・クッキー生成時の属性の不備により漏洩
  ・ネットワーク的にセッションIDが盗聴
  ・クロスサイトスクリプティングなどアプリケーションの脆弱性
  ・PHPやブラウザなどプラットフォームの脆弱性
  ・セッションIDをURLに保持している場合のRefer
・セッションIDの強制
→セッションID固定化攻撃によるIDの強制

・推測可能なセッションID
・発生箇所
  セッションIDを生成している箇所
・影響を受けるページ
  セッション管理を利用しているページすべて。
・影響の種類
  成りすまし
・影響度の度合い
  大
・利用者関与の度合い
  不要
・対策の概要
  自作のセッション管理機構でなく、実績のあるWebアプリケーション管理ツールのセッション管理機構を利用する。

ありがちなセッションID生成方法
大体は以下を元にする
・ユーザIDやメールアドレス
→脆弱性の原因
・リモートIPアドレス
・日時
→脆弱性の原因
・乱数

脆弱性が生まれる原因
予測できる情報を元にセッションIDを生成している
→それ以上に自作セッション管理機構が原因
 →自作でセキュリティ高めのIDを生成するのはほぼ不可能

対策
Webアプリケーション開発ツールが備えるセッション管理機構を利用すること
PHPだとphp.iniに設定追加すればOK

・URL埋め込みのセッションID
・発生箇所
  セッションIDを生成している箇所
・影響を受けるページ
  セッション管理を利用しているページすべて。
・影響の種類
  成りすまし
・影響度の度合い
  中～大
・利用者関与の度合い
  必要→リンクのクリック、メール添付のURL閲覧
・対策の概要
  URL埋め込みのセッションIDを禁止する設定あるいはプログラミング

PHPは設定によってセッションIDをURL埋め込みにすることが可能。
攻撃のシナリオとしては攻撃者のサイトへの誘導からリンククリック
攻撃ではなく事故としてセッションIDが漏洩するケースもある。
→SNSの投稿など

原因
不適切な設定かプログラミングが原因。

対策
クッキーにセッションIDを保存するよう設定する。

・セッションIDの固定化
やり方として、セッションIDを入手し被害者にそのセッションIDを強制して、その被害者がログイン後攻撃者がアプリケーションにアクセスする。
・発生箇所
  セッションIDを生成している箇所
・影響を受けるページ
  セッション管理を利用しているページすべて。
・影響の種類
  成りすまし
・影響度の度合い
  中
・利用者関与の度合い
  大（罠URLの閲覧、本番サイトでの認証）
・対策の概要
  ログイン時にセッションIDを変更する。

セッションIDの強制はログイン後でも前でも可能。
PHPには未知のセッションIDを受け入れる性質がある＝セッションアダプション
セッションアダプションがあれば少ない手順で罠をしかけることは出来るが、
あってもなくてもセッションIDの固定化攻撃自体は問題なく実行できる。

原因
アプリケーションの脆弱性などでセッションIDを外部から強制できること。

対策
認証後にセッションIDを変更すること
セッションIDの変更が出来ない場合はトークンにより対策する。
トークンを生成しクッキーとセッション変数の両方を保存する方法。

■リダイレクト処理にまつわる脆弱性
・オープンリダイレクト脆弱性
任意のドメインにリダイレクトできる脆弱性＝オープンリダイレクト脆弱性
フォームに入力されたURLへリダイレクトするようなサイトで起きる。
→フィッシング詐欺やマルウェア配布に悪用される可能性がある。
・発生箇所
  外部から指定したURLにダイレクト可能な箇所
・影響を受けるページ
  特定のページではなく利用者の情報を盗まれることでWebアプリケーション利用者が被害
・影響の種類
  フィッシングサイトへの誘導
  マルウェア配布
・影響度の度合い
  中～大
・利用者関与の度合い
  大
・対策の概要
  リダイレクト先を固定にする
  あらかじめ許可されたドメインにのみリダイレクトするよう制限

原因
リダイレクト先のURLを外部から指定できること
リダイレクト先のドメイン名チェックを行っていないこと

対策
・リダイレクト先のURLを固定にする
・リダイレクト先のURLを直接指定せず番号指定にする
・リダイレクト先のドメインをチェックする

・HTTPヘッダインジェクション
リダイレクトやクッキー発行など外部からのパラメータを元にHTTPレスポンスヘッダを出力する際に発生する脆弱性。
・発生箇所
  リダイレクトやクッキー生成など外部から指定したパラメータに基づいてHTTPレスポンスヘッダを出力している箇所
・影響を受けるページ
  直接的には脆弱性のあるページ。成りすましをされると全てのページ
・影響の種類
  成りすまし、偽ページ表示、キャッシュ汚染
・影響度の度合い
  中～大
・利用者関与の度合い
  必要→罠ページの閲覧、メール添付のURLクリックなど
・対策の概要
  外部からのパラメータをHTTPレスポンスヘッダとして出力しない
  リダイレクトやクッキー生成の専用ライブラリあるいはAPIを利用し、パラメータ中の改行コードをチェックする。

攻撃手法と影響
リダイレクトするURLを改行コード(%0D%0A)で区切って最初を通常のURL、2つめを罠サイトへのURLにしておく。
そうするとCGIプログラムとしては2行Locationヘッダを出力する。
Apacheは複数Locationヘッダがあると最後のLocationヘッダのみを利用するため、後半の罠サイトへのURLが有効になる。
またクッキーについても同様の動きをする。

脆弱性が生まれる原因
HTTPレスポンスヘッダは改行ごとに区切られる。
なのでパラメータ中に改行を挿入した場合に改行がそのままレスポンスとして出力されることが原因。

対策
・外部からのパラメータをHTTPレスポンスヘッダとして出力しない
・リダイレクトやクッキー生成を専用APIにまかせる
・ヘッダ生成するパラメータの改行文字をチェックする

■クッキー出力にまつわる脆弱性
クッキーにまつわる脆弱性は大体以下2つ
・クッキーを利用すべきではない目的でクッキーを使っている
・クッキーの出力方法に問題がある

クッキーの不適切な利用
基本的に書き換えられると困る情報をクッキーに保存すると脆弱性の原因となる

クッキーのセキュア属性不備

・発生箇所
  セッションIDを含めてクッキーを発行している箇所全て
・影響を受けるページ
  HTTPS通信を利用しかつ認証のあるページ全て
・影響の種類
  成りすまし
・影響度の度合い
  中
・利用者関与の度合い
  HTTPSの場合必要、HTTPとの混在サイトでは不要
・対策の概要
  クッキーにセキュア属性をつける
  セッションIDとは別にセキュア属性つきのクッキーとしてトークンを発行しページごとにトークンを確認する

攻撃手法
HTTPSでクッキーをセットした状態で用意された罠サイトにアクセスさせる。
罠サイトをHTTPで用意しておけばHTTPSでセットされたクッキーがHTTPリクエストとして送られることにより
平文でクッキーが送られることになる。なのでセッションハイジャック等に利用できる

脆弱性が生まれる原因
・開発者がセキュア属性について知らない
・セキュア属性をつけるとアプリケーションが動かなくなる

対策
セッションIDのクッキーにセキュア属性をつける
→PHPの場合だとphp.iniで設定可能
セキュア属性が付けられない場合トークンをクッキーに保存しそこにセキュア属性をつける。
クッキーとトークンをあわせて比較し改ざんがないか確認する。

セキュア属性以外の属性値に関する注意
・Domain属性
デフォルトが最も安全
・Path属性
ディレクトリごとで異なるセッションIDを発行したい場合は有効
・Expires属性
つけない
・HttpOnly属性
JavaScriptから読めなくなる。セッションIDの場合は常にON

■メール送信の問題
・メールヘッダ・インジェクション
・発生箇所
  メール送信機能のあるページ
・影響を受けるページ
  直接影響を受けるページはない。メールを送られたユーザが被害を受ける
・影響の種類
  迷惑メールの送信、改ざんなど
・影響度の度合い
  中
・利用者関与の度合い
  不要
・対策の概要
  外部からのパラメータをメールヘッダに含ませないようにする
  外部からのパラメータをメールヘッダに含ませる場合は改行を含まないようチェックする

攻撃手法と影響
そもそもヘッダを複数指定するには改行すればよいだけだが、それが考慮されていない場合に脆弱性の要因となる。
攻撃1：あて先の追加
フォームがtextareaになっている場合、改行が入るので例えば
trap@example.com
BCC:aaa@text.co.jp
とかを入れるとBCCに入れたメールアドレスにもメールが届く。

攻撃2:本文の改ざん
本文の変更を行うにはメール欄のFromアドレスに1行空行をはさんで本文を記述する。
また添付ファイルを付けることも可能。

脆弱性が生まれる原因
そもそもメールメッセージ形式はヘッダとボディを空行で区切るだけのもの。
なので外部からパラメータとして改行が含められれば攻撃できる。

対策
・ネール送信には専用のライブラリを使用する
・外部のパラメータをメールヘッダに含ませないようにする
・外部からのパラメータが必要な場合は改行を含まないようメール送信時にチェックする。
また保険的対策として
・メールアドレスのチェック
・件名のチェック
をした方が良い。

■ファイルアクセスにまつわる問題
・ディレクトリトラバーサル
・発生箇所
  ファイル名を外部から指定できるページ
・影響を受けるページ
  全てのページ
・影響の種類
  秘密情報の漏洩、データ改ざん・削除、スクリプト実行
・影響度の度合い
  大
・利用者関与の度合い
  不要
・対策の概要
  外部からファイル名を指定できる仕様を避ける
  ファイル名にディレクトリが含まれないようにする
  ファイル名を英数字に限定する

攻撃手法と影響
例えばファイルを指定し内容を表示するプログラムで実行可能。

原因
ファイル名を外部から指定することが出来る
ファイル名として絶対パスや相対パスの形で異なるディレクトリを指定できる
組み立てたファイル名に対するアクセスの可否をチェックしていない

対策
外部からファイル名を指定できる仕様にしない
ファイル名にディレクトリ名が含まれないようにする
ファイル名を英数字に限定する

・意図しないファイル公開
・発生箇所
  Webサイト全体
・影響を受けるページ
  公開されたファイルのみ
・影響の種類
  重要情報の漏洩
・影響度の度合い
  中～大
・利用者関与の度合い
  不要
・対策の概要
  非公開ファイルを公開ディレクトリに置かない。

攻撃手法と影響
ディレクトリリスニングでファイル一覧が見えるのでそこから漏洩するパターンが多い。

原因
ファイルが公開ディレクトリに置かれている
ファイルに対するURLを知る手段がある
ファイルに対するアクセス制限がかかっている

対策
アプリケーション設計時にファイルの安全な格納場所を決める
レンタルサーバの場合は非公開ディレクトリが利用できることを確認する

■OSコマンド呼び出しの際に発生する脆弱性
・OSコマンドインジェクション
・発生箇所
  シェルを呼び出す機能のある関数を実行している箇所
・影響を受けるページ
  全てのページ
・影響の種類
  秘密情報の漏洩、データの改ざん、システムの停止など
・影響度の度合い
  大
・利用者関与の度合い
  不要
・対策の概要
  シェルの呼び出し機能のある関数の利用を避ける
  シェルの呼び出しきのうのある関数には外部からのパラメータを渡さない
  OSコマンドに渡すパラメータを安全な関数によりエスケープする

攻撃手法と影響
OSコマンドを実行する関数の変数に対してOSコマンドを実行するよう命令を出す。
またはアプリケーションを実行することも可能。

原因
OSコマンド呼び出しで使われる関数やシステムコールは基本シェル経由。
そのシェルの機能に脆弱性の原因がある。
ケースとしては以下
・シェル経由でOSコマンドを呼び出す際にシェルのメタ文字がエスケープされていない
シェルの利用時に特別な意味を持つ記号文字＝メタ文字
これをエスケープしていないので、コマンドを繋げるなどの処理が可能となってしまい脆弱性となる。
・シェル機能を呼び出せる関数を使用している

対策
OSコマンド呼び出しを使わない実装方法を選択する
シェルの呼び出し機能のある関数の利用を避ける
外部から入力された文字列をコマンドラインのパラメータに渡さない
OSコマンドに渡すパラメータを安全な関数によりエスケープする。

保険として
パラメータを検証すること
アプリケーションの稼動する権限を最小限にすること
WebサーバのOSやミドルウェアのパッチ適用

■ファイルアップロードにまつわる問題
・ファイルアップロードの問題
アップロード機能にまつわる問題は以下のようなものがある
・アップロード機能に対するDos攻撃
・アップロードしたファイルをサーバ上のスクリプトとして実行させる攻撃
・仕掛けを含むファイルを利用者にダウンロードさせる攻撃

・アップロードファイルによるサーバ側スクリプト実行
・発生箇所
  ファイルのアップロード機能を提供するページ
・影響を受けるページ
  全てのページ
・影響の種類
  秘密情報の漏洩、データの改ざん、システムの停止など
・影響度の度合い
  大
・利用者関与の度合い
  不要
・対策の概要
  利用者がアップロードしたファイルは公開ディレクトリに置かずスクリプト経由で閲覧させる
  ファイルの拡張子をスクリプト実行の可能性のないものに制限する

攻撃手法と影響
例えばファイルをアップロードしてそれを表示させるプログラムの場合、
PHPファイルをアップロードすることでそのファイルをサーバ上で実行することが出来る。

原因
アップロードしたファイルが公開ディレクトリに保存される
アップロード後のファイル名としてサーバスクリプトを示す拡張子が指定できる

対策
アップロードされたファイルを公開ディレクトリにおかないこと
サーバスクリプトの拡張子をアップロードさせないようにすること

・ファイルダウンロードによるクロスサイトスクリプティング
・発生箇所
  ファイルのアップロード機能、ダウンロード機能
・影響を受けるページ
  アプリケーション全体
・影響の種類
  成りすまし
・影響度の度合い
  中～大
・利用者関与の度合い
  必要→リンクのクリックなど
・対策の概要
  ファイルのContent-Typeを正しく設定する
  レスポンスヘッダX-Content-Type-Option: nosniffを指定する
  ダウンロードを想定したファイルにはレスポンスヘッダとしてContent-Disposition:attachmentを指定する

攻撃手法と影響
PDFダウンロード機能によるXSSとして例えばPDFに偽装したHTMLファイルによるXSSが可能

原因
Content-Typeの間違った指定が原因。
間違っているとHTMLと解釈しコンテンツ中のJavaScriptが実行されてしまう可能性がある。

対策
ファイルアップロード時の対策
・拡張子が許可されたものかチェック
ファイルダウンロード時のチェック
・Cotent-Typeを正しく設定する
・レスポンスヘッダX-Content-Type-Option:nosniffを指定する
・Content-Dispositionヘッダを設定する

・PDFのFormCalcによるコンテンツハイジャック
・発生箇所
  利用者がアップロードしたPDFファイルをダウンロードする機能
・影響を受けるページ
  セッション管理や認証のあるページ
・影響の種類
  成りすまし
・影響度の度合い
  中～大
・利用者関与の度合い
  必要→罠サイトの閲覧など
・対策の概要
  PDFファイルはブラウザ内で開かずダウンロードを強制する
  PDFをobject要素やembed要素では開けない仕組みを実装する

攻撃手法と影響
FormCalcスクリプトを埋め込んだPDFファイルを攻撃対象サイトにアップロードする
攻撃対象サイトにアップロードしたPDFを埋め込んだ罠ページを罠サイトに設置し誘導
ログインした状態のユーザが罠ページを閲覧
罠に埋め込まれたPDFのFormCalcスクリプトから対象サイトにHTTPリクエストが送信される
JSとFormCalcが連携して秘密情報を入手できる

原因
AcrobatReader側の問題

対策
PDFファイルはブラウザ内で開かずダウンロードを強制する
→X-download-Options:noopenを指定すればファイルを開くことが出来ない（IEの仕様）
PDFをobject要素やembed要素では開けない仕組みを実装する
→ファイルのダウンロードリクエストを全てPOSTに限定する。

■インクルードにまつわる問題
・ファイルインクルード攻撃
・発生箇所
  includeなどによりスクリプトを読み込んでいるページ
・影響を受けるページ
  すべてのページ
・影響の種類
  情報漏えい、改ざん、不正な機能実行、他サイトへの攻撃
・影響度の度合い
  大
・利用者関与の度合い
  不要
・対策の概要
  インクルードするパス名に外部からのパラメータを含めない
  インクルードするパス名に外部からのパラメータを含む場合は英数字に限定する

攻撃手法と影響
例えばヘッダー情報を記述したファイルをrequire_onceで読み込んでいる場合、
ヌルバイト攻撃(%00)で.phpを無効にされるとhostsやpasswdといったファイルの内容を見ることが出来る。

またinclideやrequireの機能としてファイル名にURLを指定すると外部サーバのファイルをインクルードする。
その場合、外部にあるスクリプトをincludeされ情報が表示される。

またファイルのアップロードが可能なサイトやセッション変数の保存先としてファイルを使用しているサイトについては
セッション情報が保存されているファイル名さえ分かれば表示が可能。

原因
インクルードファイル名を外部から指定することが出来る
インクルードすべきファイル名かの妥当性チェックをしていない

対策
外部からファイル名を指定する仕様を避ける
ファイル名を英数字に限定する

■構造化データの読み込みにまつわる問題
・evalインジェクション
・発生箇所
  スクリプトを解釈して実行できるevalのような機能を利用しているページ
・影響を受けるページ
  すべてのページ
・影響の種類
  情報漏えい、改ざん、不正な機能実行、他サイトへの攻撃
・影響度の度合い
  大
・利用者関与の度合い
  不要
・対策の概要
  evalに相当する機能を使わない
  evalの引数に外部からのパラメータを含めない
  evalの与える外部からのパラメータを英数字に制限する

攻撃手法と影響
evalに対する外部からのパラメータをチェックしていないとevalに渡す式に任意の文を追加できる。
影響としてはPHPでできること全てと考えた方がよい。

原因
evalを用いたこと
evalに与えるパラメータのチェックがされていない

対策
evalを含む同等の機能をもった関数を使わない
evalの引数に外部からのパラメータを指定しない
evalの与える外部からのパラメータを英数字に制限する

■安全でないデシリアライゼーション
アプリケーション内部の構造を持ったデータを保存・伝達する目的でバイト列に変換すること＝シリアライズ
シリアライズされたデータから下のデータに戻すこと＝デシリアライズ
・発生箇所
  外部からの値をデシリアライズしているページ
・影響を受けるページ
  すべてのページ
・影響の種類
  情報漏えい、改ざん、不正な機能実行
・影響度の度合い
  大
・利用者関与の度合い
  不要
・対策の概要
  シリアライズ・デシリアライズ機能を使わない
  デシリアライズ処理には外部からのパラメータを使わない

攻撃手法と影響
外部から操作できる値に対してデシリアライズ処理をかけている場合、メモリ内に任意のデータを生成できる。
クッキーから呼び出してその値を表示している場合、そのクッキーにPHPの関数を入れておくだけで
呼び出しているページにアクセスすればその関数が実行され処理が行われるようになる。

原因
外部から信頼できない入力データを元にデシリアライズ処理を行うことでメモリ上に意図しないオブジェクトが生成されるため。
Javaの場合はデシリアライズの際にreadObjectメソッドが自動的に呼ばれる仕様が悪用される。

対策
シリアライズ形式ではなくJSON形式によりデータを受け渡す
クッキーやhiddenパラメータではなくセッション変数など書き換えできない形でシリアライズ形式のデータを受け渡す
HMACなどの改ざん検知の仕組みを導入してデータが改ざんされていないことを確認する。

・XML外部実体参照（XXE）
XMLには外部実体参照という機能があり外部ファイルの内容を取り込むことが出来る。
XMLデータを外部から受け取れるプログラムの場合、サーバ内部などのファイルが読み取られる可能性がある。
・発生箇所
  XMLを外部から受け取り解析しているページ
・影響を受けるページ
  すべてのページ
・影響の種類
  情報漏えい、他サイトへの攻撃
・影響度の度合い
  大
・利用者関与の度合い
  不要
・対策の概要
  外部からのデータ受け取りにXMLではなくJSONを用いる
  XMLを解析する際に外部実体参照の機能を無効化する

攻撃手法と影響
XMLファイルをアップロードして個人情報を登録するサイトがあったとする。
外部参照ファイルに対しシステムファイル（hostsなど）を指定して読み込ませることで
指定したファイルを読み取ることが出来る。
ファイルだけでなくURLでも可能。

原因
XMLの外部実体参照はXMLの機能のため、コーディングの話ではない。

対策
XMLの代わりにJSONを用いる
libxml2のバージョン2.9以降を用いる
libxml_disable_rntry_loader(true)を呼び出す

■共有資源やキャッシュに関する問題
・競合状態の脆弱性
共有資源＝共有メモリ、ファイル、DBなど
・発生箇所
  共有資源を利用している箇所
・影響を受けるページ
  すべてのページ
・影響の種類
  別人の個人情報の表示、データベースの不整合、ファイル内容の破壊など
・影響度の度合い
  中
・利用者関与の度合い
  要・不要とも
・対策の概要
  可能な限り共有資源の利用を避ける
  共有資源に対する適切な排他制御を行う

攻撃手法と影響
例えば別プロセスで同じ変数を持つようになっている場合、
時間軸的に書き換わることで正しい値が変数に入っていないことになる。
結果、個人情報漏洩に繋がる。

原因
共有変数を利用していること
共有変数の排他制御をしていないこと

対策
可能な限り共有資源を利用しない
共有資源に対して排他制御を行う

・キャッシュからの情報漏えい
・発生箇所
  キャッシュを利用している環境で秘密情報を表示している箇所
・影響を受けるページ
  秘密情報を表示しているページ
・影響の種類
  別人の個人情報の表示など
・影響度の度合い
  低・中
・利用者関与の度合い
  要
・対策の概要
  キャッシュの設定を適切に行う

攻撃手法と影響
アプリケーション側のキャッシュ制御不備の場合、アプリケーション側で情報を持っているので
他人がログインしている状態でログインページにアクセスするとアクセスできる可能性がある。

キャッシュサーバの設定不備の場合、キャッシュサーバ側が他人のアクセスにもかかわらずキャッシュがあることで
そのキャッシュをそのまま利用することがある。

原因
アプリケーション側のキャッシュ制御不備
以下の設定が追加されている場合
session_cache_limiter('public')
session_cache_expire('1')
キャッシュサーバの設定不備
以下設定が入っている場合
proxy_ignore_headers Chache-Control Expires Set-Cookie;

対策
アプリケーション側でキャッシュ制御用の適切なレスポンスヘッダを設定する
キャッシュサーバ側でキャッシュ制御用の適切な設定を行う。

■Web API実装における脆弱性
・JSONとJSONPの概要
JSON＝データ交換形式の一種
JSONP＝XMLHttpRequestではなくscript要素を用いて外部Javascriptを直接実行することによりデータを取得する

・JSONエスケープの不備
・発生箇所
  JSONやHSONPを出力するAPI
・影響を受けるページ
  全体
・影響の種類
  Webサイト利用者のブラウザ上でのJS実行
・影響度の度合い
  中～大
・利用者関与の度合い
  要
・対策の概要
  JSONの生成時に安全なライブラリ関数を使用する

攻撃手法と影響
＋をパーセントエンコードしたものを利用して攻撃可能

原因
JSON文字列の生成時に適切なエスケープ処理などが行われていない
JSONの評価にeval関数などを用いているかJSONPを用いている

対策
文字列連結によるJSONデータ生成をやめ信頼できるライブラリを用いてJSONを生成する
eval関数ではなくJSON.parseなどの安全なAPIでJSONを解釈する

・JSON直接閲覧によりXSS
・発生箇所
  JSONを生成するAPI
・影響を受けるページ
  全体
・影響の種類
  Webサイト利用者のブラウザ上でのJS実行、偽情報の表示
・影響度の度合い
  中～大
・利用者関与の度合い
  要→罠サイトの閲覧、メール記載のURLの起動
・対策の概要
  MIMEタイプを正しく設定する

攻撃手法と影響
JSON形式を外部から受け取るサイトに対してJSの関数を送ることでJSを実行させることが出来る。

原因
MIMEタイプの間違い
古いIEの利用

対策
MIMEタイプを正しく設定する
レスポンスヘッダX－Content-Type-Options:nosniffを出力する
小なり記号などをエスケープする
XMLHttpRequestなどCORS対応の機能だけから呼び出せるようにする

・JSONPのコールバック関数名によるXSS
・発生箇所
  JSONPを生成するAPI
・影響を受けるページ
  全体
・影響の種類
  Webサイト利用者のブラウザ上でのJS実行、偽情報の表示
・影響度の度合い
  中～大
・利用者関与の度合い
  要→罠サイトの閲覧、メール記載のURLの起動
・対策の概要
  MIMEタイプを正しく設定する
  コールバック関数名を検証する

攻撃手法と影響
MIMEタイプが設定されていない状態でURLにcallback=%3Cscript%3Ealeart(1)%3C/script%3E
を付け加えるとJavascriptが実行できる。

原因
外部から指定されたコールバック関数を検証しないでそのまま表示している
MIMEタイプをtext/javascriptとするべきところをtext/htmlとしている

対策
コールバック関数名の文字種と文字数を制限する
MIMEタイプを正しく設定する

・WebAPIのクロスサイトリクエストフォージェリー
攻撃経路
GETリクエストによる攻撃
HTMLフォームによる攻撃
クロスオリジン対応のXMLHttpRequestによる攻撃
XMLHttpRequestによる攻撃

対策
CSRFトークン
  Webページにhiddenパラメータやカスタムデータ属性で保存しJavascriptから参照する
  CSRFトークンを返すAPIを用意する
二重送信クッキー
  問題点
  クッキーモンスターバグの悪用
  対象サイトおよび対象サイトのサブドメインにXSS脆弱性がある場合
  通信経路上からHTTPにて強制
カスタムリクエストヘッダによる対策
入力データのMIMEタイプを検証する
CORSを適切に実装する

・JSONハイジャック
・発生箇所
  JSONを出力するAPIで秘密情報を提供しているもの
・影響を受けるページ
  JSONハイジャック脆弱性のあるAPIのみが影響を受ける
・影響の種類
  成りすまし
・影響度の度合い
  中～大
・利用者関与の度合い
  要→罠サイトの閲覧、リンククリックなど
・対策の概要
  X-Content-Type-Options:nosniffヘッダの付与
  リクエストヘッダX-Requested-With:XMLHttpRequestの確認

攻撃手法と影響
罠サイトを工夫することによりJSONを罠のJavaScriptから読み出す手法。
Setterを利用することでJSONのデータを読み出すことが出来る。

対策
X-Content-Type-Options:nosniffヘッダの付与
リクエストヘッダX-Requested-With:XMLHttpRequestの確認

・JSONPの不適切な利用
JSONPによる情報は公開情報のみにとどめ、秘密情報は公開すべきでない
→CORSなどのアクセス制御がないため

・CORSの検証不備
以下の状態は設定不備
オリジンとして＊を設定してしまう
オリジンのチェックを緩和してしまう

・セキュリティを強化するレスポンスヘッダ
以下のHTTPレスポンスヘッダを出力しているだけでセキュリティ強化
・X-Frame-Options
・X-Content-Type-Options
・X-XSS-Protection
・Content-Security-Policy
・Strict-Transport-Security

■JavaScriptの問題
・DOM Based XSS
・発生箇所
  Webアプリケーション上でJavaScriptによりDOMに関わるメソッドを呼び出しているところ
・影響を受けるページ
  Webアプリ全体
・影響の種類
  JSの実行、偽情報の表示
・影響度の度合い
  中～大
・利用者関与の度合い
  要→罠サイトの閲覧、リンククリックなど
・対策の概要
  DOM操作の適切なAPI呼び出し
  HTMLで特別な意味をもつ記号文字をエスケープする

攻撃手法と影響
・innerHTMLによるDOM Based XSS
ハッシュに応じて表示内容を変えるようなサイトに対しての攻撃で
外部から指定したJavaScriptが実行されることがある
・document.writeによるDOM Based XSS
document.writeを利用した外部からのJS実行
・XMLHttpRequestのURL未検証の問題
フラグメント識別子をトリガーにしてXMLHttpRequestによりコンテンツの一部を読み込む方法
・JQueryセレクタの動的生成によるXSS
JQueryセレクタという機能の不適切な利用によるXSS
・JavaScriptスキームによるXSS
JavaScriptのlocation.hrefに対してのXSS

原因
DOM操作の際に外部から指定されたHTMLタグなどが有効になってしまう機能を用いている
外部から指定されたJSが動作する
XMLHttpRequestのURLが未検証
location.hrefのURLが未検証

対策
・適切なDOM操作あるいは記号のエスケープ
・eval、setTimeout、Functionコンストラクタなどの引数に文字列形式で外部からの値を渡さない
・URLのスキームをhttpかhttpsに限定する
・最新のライブラリを利用する
・XMLHttpRequestのURLを検証する
・jQueryのセレクタは動的生成しない

・Webストレージの適切な使用
何を保存すべきか
重要な情報は保存しないようにする→漏洩するものと考える

・postMessage呼び出しの不備
postMessage＝複数のウインドウが異なるオリジンで協調して動作する環境でメッセージやデータのやり取りを行う仕組み
問題点
・メッセージ送信先の未確認
・メッセージ送信元の未確認

対策
・メッセージ送信先の確認
・メッセージ送信元の確認

・オープンリダイレクト

脆弱性の原因
フラグメント識別子で指定されたURLにリダイレクトすることを防いでいない場合に起きる

対策
リダイレクト先のURLを固定にする
リダイレクト先のURLを直接指定せず番号などで指定する