第5章 代表的なセキュリティ機能

■認証
・ログイン機能
ログイン機能は以下のようなSQL文で存在すればログインできたとみなすものが多い。
select * from usermaster where id = ? and password = ?

ログイン機能に対する攻撃
SQLインジェクション脆弱性がある場合、認証機能をバイパスしてログインできる場合がある。
SQLインジェクション脆弱性がアプリケーションのどこかにあればパスワードを取得することも可能。
ログイン画面に対するパスワードを試行して見つける方法もある（ブルートフォース）
ソーシャルエンジニアリングによるパスワード取得も最近の手法。
フィッシングサイトを作成しそこから入手することも可能

ログイン機能が破られた場合の影響
不正ログインされれば利用者の持つ権限を全て利用できる。
影響はセッションハイジャックと同じ。

不正ログインを防ぐには
SQLインジェクションなどセキュリティバグをなくす
パスワードを予測困難なものにする。

・パスワード認証を狙った攻撃への対策
基本的なアカウントロック
ロックさせる回数は10回ミスくらいが妥当
ただし再有効化は以下のルール
アカウントロックからある程度の時間（30分程度）経過した場合、自動的に再有効化される
管理者が何らかの方法で本人確認した後に再有効化する

パスワード認証に対する攻撃のバリエーションと対策
辞書攻撃
→使用頻度の高いやつを辞書にして試す
ジョーアカウント探索
→IDとPASSが同じものを設定できる場合、それを試す
リバースブルートフォース攻撃
→パスワードを固定してユーザIDを変更していく
パスワードスプレー攻撃
→IDもパスワードも固定せずいくつかのパスワード候補をIDを変えながら試していく
パスワードリスト攻撃
→別サイトから流出したIDとパスワード一覧を用いてログイン試行する

パスワードを狙った攻撃への対策
二段階認証の実装
積極的なパスワードチェック
ログイン失敗率の監視
各種対策方法の比較

・パスワードの保存方法

パスワード保護の必要性
パスワードが保護されていないと様々な形で悪用される。
代表的なパスワード保護の手段として暗号化とメッセージダイジェストがある。

暗号化によるパスワード保護と課題
暗号を使う場合は以下が課題
安全な暗号アルゴリズムの選定
暗号化・復号処理の安全な実装
鍵の生成
鍵の保管
暗号アルゴリズムが危殆化（きたいか）した場合の再暗号化

メッセージダイジェストによるパスワード保護と課題
メッセージダイジェストとは？
ハッシュ値

メッセージダイジェストを用いてパスワードを保護する
ハッシュ値から元のデータを解析するための手法は以下
脅威1：オフラインブルートフォース攻撃
→場当たり的に元データを探索可能
脅威2：レインボーテーブル
→表引きできるハッシュ値の解析
脅威3：ユーザDB内にパスワード辞書を作られる
→ユーザDB内に辞書を作成して同じものがあれば同じパスワードとなる

対策1：ソルト
→ユーザごとに別の文字列を用意しパスワードと結合させてハッシュ値とする。そうすればハッシュ値はユーザごとに異なる
対策2：ストレッチング
→遅いハッシュ関数を利用する

・自動ログイン
最近は自動ログインは許容される傾向。理由は以下
Webの利用が浸透した結果、ログイン状態を継続することを前提としたサービスが増加したため
頻繁にログイン、ログアウトさせる方が単純なパスワードを付けられやすい

危険な実装例
クッキーのExpireを30日とかに設定している状態で
ユーザ名と自動ログインのフラグが平文でクッキーに保存されている場合

自動ログインの安全な実装方法
セッションの寿命を延ばす
トークンを使う
→ユーザIDとトークンを利用しての自動ログイン実装
チケットを使う

・ログインフォーム
ガイドラインは以下
パスワード入力欄はマスク表示する
HTTPSを利用する

・エラーメッセージの要件
IDとパスワードどちらが間違いか分かるサイトはダメ

まずい理由
どちらかが間違っていると分かれば探索が楽になるから

・ログアウト機能
ログアウト機能の要件は以下
ログアウト処理は副作用があるのでPOSTメソッドでリクエストする
ログアウト処理ではセッションを破棄する
必要な場合CSRF対策の対象とする

■アカウント管理
・ユーザ登録
ユーザ登録で注意することは以下
メールアドレスの受信確認
→認証が必要なサイトにとってメール通知は非常に重要。なので登録されたかどうかは確認すべき。
ユーザIDの重複防止
→誤って別ユーザでログインできる可能性がある。
ユーザの自動登録への対処
→大量にユーザを作成される可能性への対処。CAPTCHAを使うと良い。
パスワードに関する注意
SQLインジェクション脆弱性
メールヘッダインジェクション脆弱性

・パスワード変更
パスワード変更時に重要なことは以下
現在のパスワードを確認すること
パスワード変更時のメール通知

・メールアドレスの変更
メールアドレス変更時に悪用される手口は以下
セッションハイジャック
CSRF攻撃
SQLインジェクション攻撃

メールアドレス変更に必要な機能的対策
新規メールアドレスに対する受信確認
再認証
メール通知

・パスワードリセット
パスワードリセット機能は管理者向けとユーザ向けがある
管理者向け
以下の流れで実施すべき
１．問い合わせを受けて本人確認を行う
２．パスワードリセットし仮パスワードを伝える
３．利用者が仮パスワードでログインし変更する
ユーザ向け
本人確認の方法として登録済みメールアドレスへのメール受け取りで行うのがほとんど
パスワードの通知方法としては以下の方法がある。
・現在のパスワードをメールで通知する
・パスワード変更画面のURLをメールで通知する
・仮パスワードをメールで通知する
・パスワード変更画面に直接遷移する

・アカウント停止
以下の場合はアカウント停止できるようにしておくこと
本人からの依頼
不正アクセスを受けている場合

・アカウント削除
削除するときはパスワード確認を入れておくこと

■認可
・認可とは
認証された利用者に対して権限を与えること

・認可不備の典型例
URLを知っていればアクセスできる
情報リソースのIDを変更すると権限外の情報が参照できる
メニューの表示、非表示のみで抑制している
hiddenパラメータやクッキーに権限情報を保持している

・認可制御の要件定義
認可制御を正しく実装するためにはあるべき姿を要件とする。

・認可制御の正しい実装
この機能を実行してよいユーザであるか
リソースに対する操作の権限はあるか

■ログ出力
・ログ出力の目的
攻撃や事故の予兆をログから把握し早期に対策するため
攻撃や事故の事後調査のため
アプリケーションの運用監査のため

ログの種類
エラーログ
→アプリケーションの様々なエラーを記録
アクセスログ
→利用記録
デバッグログ
→デバッグ用のログ

・ログ出力の実装
log4jやlog4phpなどを利用すること